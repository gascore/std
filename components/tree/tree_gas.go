// Code generated by gasx. DO NOT EDIT.
// source: tree.gas


package tree

import (
	"fmt"
	"github.com/gascore/dom"
	"github.com/gascore/gas"
	"strings"
)

type Config struct {
	Name 		string
	CanBeHidden bool
	Events 	    Events

	Items       []Item
}

type Events struct {
	ItemClick func(item Item) error
}

type Item struct {
	IsDirectory       bool
	Childes           []Item // if is directory

	Name string
	Renderer func(Item) *gas.C // if null render item name

	Data interface{}
}

func toIA(items []Item) []interface{} {
    var a []interface{}
    for _, el := range items {
        a = append(a, el)
    }
    return a
}

func GetTree(c Config) *gas.Component {
	if c.Items == nil {
		dom.ConsoleError("invalid items")
		return nil
	}

	cName := strings.Replace(c.Name, " ", "_", -1)

	return gas.NC(
		&gas.C{
			Data: map[string]interface{}{
				"isHidden": false,
			},
		},
		func(this *gas.Component) []interface{} {return gas.ToGetComponentList(gas.NE(
&gas.Component{Tag:"div",

Binds: map[string]gas.Bind{
"class": func() string {
	return fmt.Sprintf(`tree tree-%s`, cName)
},

},},
gas.NE(
&gas.Component{Tag:"div",

Binds: map[string]gas.Bind{
"class": func() string {
	return fmt.Sprintf(`tree-header tree-%s-header`, cName)
},

},},
gas.NE(
&gas.Component{Tag:"b",},``,  c.Name ,),
gas.NE(
&gas.Component{Tag:"button",

Binds: map[string]gas.Bind{
"class": func() string {
	return fmt.Sprintf(`tree-hide-btn tree-%s-hide-btn`, cName)
},

},
Handlers: map[string]gas.Handler{
"click": func(p *gas.Component, e gas.Object) { this.SetValue(`isHidden`, !this.Get(`isHidden`).(bool)) },
},

If: func(p *gas.Component) bool {
	return c.CanBeHidden
},
},
gas.NE(
&gas.Component{Tag:"span",

If: func(p *gas.Component) bool {
	return this.Get(`isHidden`).(bool)
},
},`
                    Show
                `,),
gas.NE(
&gas.Component{Tag:"span",

Else: true, 
},`
                    Hide
                `,),),),
gas.NE(
&gas.Component{Tag:"ul",

Binds: map[string]gas.Bind{
"class": func() string {
	return fmt.Sprintf(`tree-items tree-%s-items`, cName)
},

},

Show: func(p *gas.Component) bool {
	return !this.Get(`isHidden`).(bool)
},
},gas.NewForByData(toIA(c.Items), func(i int, nItem interface{}) interface{} {
 return gas.NE(
&gas.Component{Tag:"li",},renderItem(nItem.(Item), c),)}),),),)},)
}

var treeT gas.GetComponentChildes
