package tree

import (
    "github.com/gascore/gas"
)

func renderItem(item *Item, config *Config) *gas.E {
    f := &gas.F{}

    onClick := func() {
        item.IsOpen = !item.IsOpen

        if config.OnItemClick != nil {
            f.C.WarnError(config.OnItemClick(item))
        }

        go f.C.Update()
    }

    return f.Init(true, $htmlF{
        <div g-if="item.IsDirectory" class="tree-item tree-directory-item">
            <div class="tree-item-header" @click="onClick()">
                <button class="tree-item-header__hide-btn">
                    <span g-if="!item.IsOpen" g-html="config.ArrowRight"></span>
                    <span g-else g-html="config.ArrowDown"></span>
                </button>
                <span class="tree-item-header_name">
                    <span g-if="item.Renderer == nil" class="tree-item-header__name">
                        {{ item.Name }}
                    </span>
                    <span g-else class="tree-item-header__byRenderer">
                        <e run="item.Renderer(item)"></e>
                    </span>
                </span>
            </div>
            <ul g-if="item.IsOpen" class="tree-item-subs">
                <li g-for="_, nItem := range item.Childes" class="tree-item-subs_item">
                    <e run="renderItem(nItem, config)"></e>
                </li>
            </ul>
        </div>
        <div g-else class="tree-item tree-item_name-only" @click="onClick()">
            <span g-if="item.Renderer == nil" class="tree-item_name">
                {{ item.Name }}
            </span>
            <span g-else class="tree-item_byRenderer">
                <e run="item.Renderer(item)"></e>
            </span>
        </div>
    }$)
}
