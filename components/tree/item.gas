<template>
    <div>
        <div
            g-if="item.IsDirectory"
            :class="fmt.Sprintf(`tree-item tree-%s-item directory-item`, c.Name)"
            @click="this.Method(`emitClickEvent`)">
            <div class="directory-item-header" @click="this.SetValue(`isHidden`, !this.Get(`isHidden`).(bool))">
                <button class="directory-item-header__hide-btn">
                    <span g-if="this.Get(`isHidden`).(bool)" class="icon-arrow-up icon"></span>
                    <span g-else class="icon-arrow-down icon"></span>
                </button>
                <div g-if="item.Renderer == nil" class="directory-item-header__name">
                    {{ item.Name }}
                </div>
                <div g-else>
                    <e run="safeRenderer(item.Renderer, item)"></e>
                </div>
            </div>
            <ul g-if="!this.Get(`isHidden`).(bool)">
                <li g-for="nItem in @toIA(item.Childes)">
                    <e run="renderItem(nItem.(Item), c)"></e>
                </li>
            </ul>
        </div>
        <div
            g-else
            @click="this.Method(`emitClickEvent`)">
            <div g-if="item.Renderer == nil" :class="fmt.Sprintf(`tree-item tree-%s-item tree-normal-item`, c.Name)">
                {{ item.Name }}
            </div>
            <div g-else>
                <e run="safeRenderer(item.Renderer, item)"></e>
            </div>
        </div>
    </div>
</template>

<script>
package tree

import (
    "fmt"
    "github.com/gascore/gas"
)

func safeRenderer(r func(Item)*gas.C, item Item) *gas.C {
    if r == nil {
        return nil
    }
    return r(item)
}

func renderItem(item Item, c Config) *gas.Component {
    return gas.NC(
        &gas.C{
            Data: map[string]interface{}{
                "isHidden": true,
            },
            Methods: map[string]gas.Method {
                "emitClickEvent": func(this *gas.C, values ...interface{}) (interface{}, error) {
                    if c.Events.ItemClick != nil {
                        err := c.Events.ItemClick(item)
                        if err != nil {
                            return nil, err
                        }
                    }

                   return nil, nil
                },
            },
        },
        itemT,)
}

var itemT gas.GetComponentChildes
</script>