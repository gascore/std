// Code generated by gasx. DO NOT EDIT.
// source: item.gas


package tree

import (
    "fmt"
    "github.com/gascore/gas"
)

func safeRenderer(r func(Item)*gas.C, item Item) *gas.C {
    if r == nil {
        return nil
    }
    return r(item)
}

func renderItem(item Item, c Config) *gas.Component {
    return gas.NC(
        &gas.C{
            Data: map[string]interface{}{
                "isHidden": true,
            },
            Methods: map[string]gas.Method {
                "emitClickEvent": func(this *gas.C, values ...interface{}) (interface{}, error) {
                    if c.Events.ItemClick != nil {
                        err := c.Events.ItemClick(item)
                        if err != nil {
                            return nil, err
                        }
                    }

                   return nil, nil
                },
            },
        },
        func(this *gas.Component) []interface{} {return gas.ToGetComponentList(gas.NE(
&gas.Component{Tag:"div",},
gas.NE(
&gas.Component{Tag:"div",

Binds: map[string]gas.Bind{
"class": func() string {
	return fmt.Sprintf(`tree-item tree-%s-item directory-item`, c.Name)
},

},
Handlers: map[string]gas.Handler{
"click": func(p *gas.Component, e gas.Object) { this.Method(`emitClickEvent`) },
},

If: func(p *gas.Component) bool {
	return item.IsDirectory
},
},
gas.NE(
&gas.Component{Tag:"div",
Attrs: map[string]string{"class": "directory-item-header",
},
Handlers: map[string]gas.Handler{
"click": func(p *gas.Component, e gas.Object) { this.SetValue(`isHidden`, !this.Get(`isHidden`).(bool)) },
},},
gas.NE(
&gas.Component{Tag:"button",
Attrs: map[string]string{"class": "directory-item-header__hide-btn",
},},
gas.NE(
&gas.Component{Tag:"span",

If: func(p *gas.Component) bool {
	return this.Get(`isHidden`).(bool)
},

Attrs: map[string]string{"class": "icon-arrow-up icon",
},},),
gas.NE(
&gas.Component{Tag:"span",

Else: true, 

Attrs: map[string]string{"class": "icon-arrow-down icon",
},},),),
gas.NE(
&gas.Component{Tag:"div",

If: func(p *gas.Component) bool {
	return item.Renderer == nil
},

Attrs: map[string]string{"class": "directory-item-header__name",
},},``,  item.Name ,),
gas.NE(
&gas.Component{Tag:"div",

Else: true, 
},safeRenderer(item.Renderer, item),),),
gas.NE(
&gas.Component{Tag:"ul",

If: func(p *gas.Component) bool {
	return !this.Get(`isHidden`).(bool)
},
},gas.NewForByData(toIA(item.Childes), func(i int, nItem interface{}) interface{} {
 return gas.NE(
&gas.Component{Tag:"li",},renderItem(nItem.(Item), c),)}),),),
gas.NE(
&gas.Component{Tag:"div",

Else: true, 

Handlers: map[string]gas.Handler{
"click": func(p *gas.Component, e gas.Object) { this.Method(`emitClickEvent`) },
},},
gas.NE(
&gas.Component{Tag:"div",

If: func(p *gas.Component) bool {
	return item.Renderer == nil
},


Binds: map[string]gas.Bind{
"class": func() string {
	return fmt.Sprintf(`tree-item tree-%s-item tree-normal-item`, c.Name)
},

},},``,  item.Name ,),
gas.NE(
&gas.Component{Tag:"div",

Else: true, 
},safeRenderer(item.Renderer, item),),),),)},)
}

var itemT gas.GetComponentChildes
