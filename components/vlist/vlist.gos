package vlist

import (
	"fmt"
	"strconv"

	"github.com/gascore/dom"
	"github.com/gascore/dom/js"
	"github.com/gascore/gas"
)

type Config struct {
	Direction bool // true - vertical, false - horizontal
	directionV, directionTransform string

	MinSmoother int

	ItemsWrapperTag string // ul, table, dl
	Padding         int
	Items           []interface{}

	DefaultItemsSmooth int

	ChildHeight int
	ChildWidth  int
	childSize   int

	Change func(start, end int) error
}

func (config *Config) normalize() {
	if config.Direction {
		config.directionTransform = "translateY"
		config.directionV = "height"
		config.childSize = config.ChildHeight
	} else {
		config.directionTransform = "translateX"
		config.directionV = "width"
		config.childSize = config.ChildWidth
	}

	if config.DefaultItemsSmooth == 0 {
		config.DefaultItemsSmooth = 4
	}

	if config.ItemsWrapperTag == "" {
		config.ItemsWrapperTag = "div"
	}

	if config.MinSmoother == 0 {
		config.MinSmoother = 2
	}
}

type Renderer func(item interface{}, i, start int) (el *gas.E)

type vlistEl struct {
	c *gas.C

	config *Config
	
	topPadding   int
	items      	 []interface{}
	scrollHeight int
	start        int

	renderer Renderer
}

func GetList(config *Config, renderer Renderer) *gas.C {
	config.normalize()

	if renderer == nil {
		dom.ConsoleError("invalid renderer for vlist")
		return nil
	}

	root := &vlistEl{
		config: config,
		scrollHeight: config.childSize * len(config.Items),
		renderer: renderer,
	}

	c := &gas.C{
		Element: &gas.E{
			Attrs: func() gas.Map {
				return gas.Map{
					"style": "height: 100%; width: 100%",
				}
			},
		},
		Root: root,
		NotPointer: true,
		Hooks: gas.Hooks{
			Mounted: func() error {
				err := root.calculateItems()
				if err != nil {
					return err
				}

				go root.c.Update()
				
				return nil
			},
		},
	}
	root.c = c

	return c
}

func (root *vlistEl) Render() *gas.E {
	return $html{
	<div class="vlist" @scroll="root.onScroll()">
        <div
             class="vlist-padding"
             :style='fmt.Sprintf("%s: %dpx;", root.config.directionV, root.scrollHeight)'></div>
        <e run="root.genItems()"></e>
    </div>
	}$
}

func (root *vlistEl) onScroll() {
	dom.GetWindow().RequestAnimationFrame(func(timeStep js.Value) {
		err := root.calculateItems()
		if err != nil {
			dom.ConsoleError(err.Error())
			return
		}

		go root.c.Update()
	})
}

func (root *vlistEl) calculateItems() error {
	_el := root.c.Element.BEElement().(*dom.Element)
	if _el == nil {
		return nil
	}

	var scrollTop, offsetHeight int
	if root.config.Direction {
		scrollTop = _el.ScrollTop()
		offsetHeight = _el.OffsetHeight()
	} else {
		scrollTop = _el.ScrollLeft()
		offsetHeight = _el.OffsetWidth()
	}

	endRaw, err := strconv.Atoi(fmt.Sprintf("%.0f", float64(offsetHeight)/float64(root.config.childSize)))
	if err != nil {
		return err
	}

	smoother := endRaw/10
	if smoother < root.config.MinSmoother {
		smoother = root.config.MinSmoother
	}

	start := scrollTop / root.config.childSize
	end := start + endRaw + smoother

	root.start = start
	root.topPadding = start * root.config.childSize

	if root.config.Change != nil {
		err = root.config.Change(start, end)
		if err != nil {
			return err
		}
	}

	var childes []interface{}
	for i, item := range getSlice(root.config.Items, start, end) {
		childes = append(childes, root.renderer(item, i, start))
	}
	root.items = childes

	return nil
}

func (root *vlistEl) genItems() *gas.E {
	return gas.NE(
		&gas.E{
			Tag: root.config.ItemsWrapperTag,
			Attrs: func() gas.Map {
				return gas.Map{
					"class": "vlist-content",
					"style": func() string {
						return fmt.Sprintf("transform: %s(%dpx);", root.config.directionTransform, root.topPadding)
					}(),
				}
			},
		},
		root.items...,
	)
}

func getSlice(arr []interface{}, start, end int) []interface{} {
	if start > len(arr) {
		return []interface{}{}
	}

	if end > len(arr) {
		end = len(arr)
	}

	return arr[start:end]
}
