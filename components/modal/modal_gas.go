// Code generated by gasx. DO NOT EDIT.
// source: modal.gas


package modal

import (
	"fmt"
	"github.com/gascore/dom"
	"github.com/gascore/gas"
	"strings"
)

type Config struct {
	IsActive bool
	Closer func() error

	MaxHeight string
	MaxWidth string

	Background string
	ClassName string

	DisableEvents bool
	// Draggable bool
}

func disable(config Config) error {
    if config.DisableEvents {
        return nil
    }

    return config.Closer()
}

func GetModal(config Config, e gas.External) *gas.C {
	if len(e.Body) == 0 {
		dom.ConsoleError("invalid modal body") // just warn
	}

	if config.ClassName == "" {
		config.ClassName = "modal"
	}

	if config.Background == "" {
		config.Background = "rgba(247,248,249,.75)"
	}

	if config.MaxHeight == "" {
		config.MaxHeight = "75vh"
	}

	if config.MaxWidth == "" {
		config.MaxWidth = "75vh"
	}

	var classIsActive string
	if config.IsActive {
		classIsActive = config.ClassName+"-active"
	}

	mainStyles := strings.Replace(`
align-items: center;
bottom: 0;
justify-content: center;
left: 0;
opacity: 0;
overflow: hidden;
padding: .4rem;
position: fixed;
right: 0;
top: 0;
display: flex;
opacity: 1;
z-index: 400;`,"\n", " ", -1)

	var cursor string
	if !config.DisableEvents {
		cursor = "pointer"
	}

	overlayStyles := strings.Replace(fmt.Sprintf(`background: %s;
bottom: 0;
cursor: %s;
display: block;
left: 0;
position: absolute;
right: 0;
top: 0;`, config.Background, cursor), "\n", " ", -1)

	containerStyles := strings.Replace(fmt.Sprintf(`background: #fff;
border-radius: .1rem;
box-shadow: 0 0.2rem 0.5rem rgba(48,55,66,.3);
display: flex;
flex-direction: column;
max-height: %s;
max-width: %s;
width: 100%s;

animatopn: slide-down .2s ease 1;
z-index: 1;

overflow: auto;`, config.MaxHeight, config.MaxWidth, "%"), "\n", " ", -1)

	return gas.NC(
		&gas.C{
			Attrs: map[string]string{
				"class": config.ClassName,
				"style": mainStyles,
			},
            If: func(this *gas.Component) bool {
                return config.IsActive
            },
		},
		func(this *gas.Component) []interface{} {return gas.ToGetComponentList(gas.NE(
&gas.Component{Tag:"div",


Binds: map[string]gas.Bind{
"class": func() string {
	return config.ClassName
},

"style": func() string {
	return mainStyles
},

},

If: func(p *gas.Component) bool {
	return config.IsActive
},
},
gas.NE(
&gas.Component{Tag:"div",


Binds: map[string]gas.Bind{
"class": func() string {
	return config.ClassName+`-overlay`+classIsActive
},

"style": func() string {
	return overlayStyles
},

},
Handlers: map[string]gas.Handler{
"click": func(p *gas.Component, e gas.Object) { disable(config) },
},},),
gas.NE(
&gas.Component{Tag:"div",


Binds: map[string]gas.Bind{
"class": func() string {
	return config.ClassName+`-container`
},

"style": func() string {
	return containerStyles
},

},},e.Body,),),)},)
}

var modalT gas.GetComponentChildes
